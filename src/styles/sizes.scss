$tablet-max-width: 1024px;
$phone-max-width: 768px;
$mobile-max-width: 767px;

html,
body {
  width: 100%;
  max-width: 100%;
  display: flex;
  flex-direction: column;
  overflow-x: hidden;
}

* {
  position: relative;
}

@function calculate-rem($some-number, $another-number) {
  @return $some-number * $another-number;
}

$sizes: 30;

@for $i from 1 through $sizes {
  .mb-#{$i} {
    margin-bottom: calculate-rem($i, 1) + rem !important;
  }

  .mt-#{$i} {
    margin-top: calculate-rem($i, 1) + rem !important;
  }

  .ml-#{$i} {
    margin-left: calculate-rem($i, 1) + rem !important;
  }

  .mr-#{$i} {
    margin-right: calculate-rem($i, 1) + rem !important;
  }

  .pt-#{$i} {
    padding-top: calculate-rem($i, 1) + rem !important;
  }

  .pb-#{$i} {
    padding-bottom: calculate-rem($i, 1) + rem !important;
  }
}

.mx-auto {
  margin-left: auto !important;
  margin-right: auto !important;
}
.ml-auto {
  margin-left: auto !important;
}
.mr-auto {
  margin-right: auto !important;
}
.mt-0 {
  margin-top: 0rem !important;
}
.mb-0 {
  margin-bottom: 0rem !important;
}
.mr-0 {
  margin-right: 0rem !important;
}
.ml-0 {
  margin-left: 0rem !important;
}
.pt-0 {
  padding-top: 0rem !important;
}
.pb-0 {
  padding-bottom: 0rem !important;
}
.pr-0 {
  padding-right: 0rem !important;
}
.pl-0 {
  padding-left: 0rem !important;
}

.w-auto {
  width: auto !important;
}
// values in both lists have to be exactly the same
$widths-list: 25 30 33 40 50 60 70 75 80 90 100;
$widths-list-values: 25% 30% 33% 40% 50% 60% 70% 75% 80% 90% 100%;

@for $i from 1 through length($widths-list) {
  .w-#{nth($widths-list, $i)} {
    width: nth($widths-list-values, $i);
  }

  .pl-#{$i} {
    padding-left: calculate-rem($i, 1) + rem;
  }

  .pr-#{$i} {
    padding-right: calculate-rem($i, 1) + rem;
  }
}

// These classes are responsible for mobile view from 1024px down to 320px
@media only screen and (max-width: $tablet-max-width) {
  .w-mobile-auto {
    width: auto;
  }
  @for $i from 1 through length($widths-list) {
    .w-mobile-#{nth($widths-list, $i)} {
      width: nth($widths-list-values, $i);
    }
  }
}

// These classes are responsible for mobile view from 1024px down to 767px
@media only screen and (min-width: $phone-max-width) and (max-width: $tablet-max-width) {
  .w-sm-auto {
    width: auto;
  }
  @for $i from 1 through length($widths-list) {
    .w-sm-#{nth($widths-list, $i)} {
      width: nth($widths-list-values, $i);
    }
  }
}
// These classes are responsible for mobile view from 767px down to 320px
@media only screen and (max-width: $phone-max-width) {
  @for $i from 1 through length($widths-list) {
    .w-xs-auto {
      width: auto;
    }
    .w-xs-#{nth($widths-list, $i)} {
      width: nth($widths-list-values, $i);
    }
  }
}

.scrollable {
  overflow: auto;
}

.non-scrollable {
  overflow: hidden;
}

.uppercase {
  text-transform: uppercase;
}

@for $i from 1 through 10 {
  .opacity-#{$i} {
    opacity: $i / 10;
  }
}

.boundry {
  max-width: 144rem;
}

@media only screen and (min-width: 1920px) {
  .el-w-76 {
    width: 76%;
  }
  .boundry-xl {
    max-width: 144rem;
  }
}
